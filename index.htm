<html>
<head>
    <title>Find Security Bugs</title>
    <link href='http://fonts.googleapis.com/css?family=Squada+One' rel='stylesheet' type='text/css'>

    <link rel="stylesheet" type="text/css" href="styles.css"/>

</head>
<body>

<a href="https://github.com/h3xstream/find-sec-bugs"><img
        style="position: fixed; top: 0; left: 0; border: 0;z-index:100;"
        src="https://s3.amazonaws.com/github/ribbons/forkme_left_green_007200.png" alt="Fork me on GitHub"></a>

<div class="container">
    <div class="left_column">


        <br/><br/><br/><br/><br/>


        <a href="#about" class="menu">/about</a><br/>
        <a href="#download" class="menu">/download</a><br/>
        <a href="#bugs" class="menu">/bugs</a><br/>
        <a href="#detectors" class="menu">/detectors</a><br/>
        <a href="#integration" class="menu">/integration</a><br/>
        <a href="#license" class="menu">/license</a><br/>

        <br/><br/>
        <a href="http://travis-ci.org/h3xstream/find-sec-bugs"><img
                src="https://secure.travis-ci.org/h3xstream/find-sec-bugs.png?branch=master" alt="Build Status"/></a>

        <br/><br/>
    </div>

    <div class="right_column">
        <center><a href="https://github.com/h3xstream/find-sec-bugs" class="big_title">Find Security Bugs</a></center>
        <div class="main_content">

            <a name="about"><span class="title">/about</span></a>

            <p>
                <b>Find Security Bugs</b> is a plugin for FindBugs that aim to help security audit on Java web
                application.
            </p>

            <a name="download"><span class="title">/download</span></a>

            <p>
                <a href="https://github.com/h3xstream/find-sec-bugs/downloads" class="download_button">Get the plugin v
                    1.0</a>
                <a href="http://findbugs.sourceforge.net/" class="download_button">Get Find Bugs</a>
            </p>

            <a name="bugs"><span class="title">/bugs</span></a>

            <p>
                The bug patterns identified by the plugin are not automatically vulnerabilities or defects.
                They represent sensible points of the application that should be analyse closely. A description will
                always be attach to explain the risk.
            </p>

            <p>
                Vulnerability categories cover:
            <table>
                <tr>
                    <td>
                        <ul>
                            <li>Endpoints from various framework</li>
                            <li>Command Injection</li>
                            <li>XPath Injection</li>
                            <li>Xml eXternal Entity (XXE)</li>
                        </ul>
                    </td>
                    <td>
                        <ul>
                            <li>Weak cryptography</li>
                            <li>Tainted inputs</li>
                            <li>Predictable random</li>
                            <li>Specific library weakness</li>
                        </ul>
                    </td>
                    <td>
                        <ul>
                            <li>XSS in JSP page</li>
                            <li>SQL/HQL injection</li>
                            <li>ReDOS</li>
                            <li>...</li>
                        </ul>
                    </td>
                </tr>
            </table>
            Frameworks support:
            <table>
            <tr>
                <td>
                    <ul>
                        <li>Spring MVC</li>
                        <li>Apache Tapestry 5</li>
                        <li>Struts 1</li>
                        <li>Struts 2</li>
                    </ul>
                </td>
                <td>
                    <ul>
                        <li>JaxRS (any implementation)</li>
                        <li>JaxWS</li>
                        <li>J2EE classic Web api</li>
                        <li>Apache Wicket</li>
                    </ul>
                </td>
            </tr>
            </table>
            </p>

            <a name="detectors"><span class="title">/detectors</span></a>

            <p>The complete list of detectors that will highlight code sections that are at risk:</p>

            <p>
                <table class="bug_list">
                    <tr>
                        <th class="bug_title">Predictable Pseudo Random Generator (PRG)</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The use of a predictable random value can lead to vulnerability in those contexts:</p>
<ul>
<li>CSRF token</li>
<li>password reset token (sent by email)</li>
<li>or any other secret value</li>
</ul>
<p>A quick fix would be to replace the instanciation of <b>java.util.Random</b> by <b>java.security.SecureRandom</b>.

<p>
<b>References</b><br/>
<a href="http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html">Cracking Random Number Generators - Part 1 (http://jazzy.id.au)</a><br/>
<a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT: MSC02-J. Generate strong random numbers</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Servlet parameter</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The Servlet can read GET and POST parameters from various method. The value obtain should be consider unsafe.
In may be needed to sanitize those values when calling sensitive api such as:</p>
<ul>
<li>SQL query (May lead to SQL injection)</li>
<li>File opening (May lead to path traversal)</li>
<li>Command execution (Potential Command injection)</li>
<li>HTML construction (Potential XSS)</li>
<li>etc...</li>
</ul></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Content-Type</th>
                    </tr>
                    <tr>
                        <td class="bug_desc">The HTTP header Content-Type can be control by the client.</td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Hostname (ServerName/Host)</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The hostname can often be control by the client. Both <i>ServletRequest.getServerName()</i> and
<i>HttpServletRequest.getHeader("Host")</i> have the same behavior which is to extract the <i>"Host"</i> header.</p>
<pre>
GET /test HTTP/1.1
Host: www.example.com
[...]
</pre>
<p>
The web container serving your application may redirect request to your application by default. This would allow
a malicious user to place any value. It is recommended to have no assumption on the value and therefor to proper
escaping and validation if needed.
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Session Id</th>
                    </tr>
                    <tr>
                        <td class="bug_desc">To be confirmed...</td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Query String</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The query string is the concatenation of the GET parameters and values. Parameter others that those intended can
be passed.</p>
<p>For the url request <i>/app/servlet.htm?a=1&b=2</i>, the query string extract will be <i>a=1&b=2</i></p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Header</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Request header can easily be alter by the client. No assumption should be make that the request come from a regular browser</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Header "Referer"</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>
Behavior:
<ul>
<li>Any value can be assigned to this header</li>
<li>The "Referer" will not be present if the request was initiated from another origin that is secure (https).</li>
</ul>
</p>
<p>
Recommendations:
<ul>
<li>No access control should be base on this header.</li>
<li>No CSRF protection should be based only on this value (Because it is optional).</li>
</ul></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Header "User-Agent"</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The header "User-Agent" can be easily spoofed by the client. Adopting different behavior base on the User-Agent (for
crawler UA) is not recommended.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Request Header</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Request header can easily be alter by the client. No assumption should be make that the request come from a regular browser</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Cookie usage</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The information store in the cookie should not be sensitive or related to the session. In most case, session
variables should be used. see HttpSession (HttpServletRequest.getSession())</p>
<p>Cookies can be use for information that need live longer than the session.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Path traversal (read file)</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The class selected is use to open a file handle using a <b>dynamic</b> parameter.</p>
<p>If unfiltered input is pass to this function, content from an arbitrary path could be read.</p>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC : Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP : Path Traversal</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Path traversal (write file)</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The class selected is use to open a file handle using a <b>dynamic</b> parameter.</p>
<p>If unfiltered input is pass to this function, content could be writen to an arbitrary path.</p>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33 : Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP : Path Traversal</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Command Injection</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The api highlight is used to executed system command. If unfiltered input is passed to this api, it can lead arbitrary command execution.</p>
<p>
<b>Reference</b><br/>
<a href="https://www.owasp.org/index.php/Command_Injection">OWASP : Command Injection</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">FilenameUtils partial filtering</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Some FilenameUtils' methods doesn't filter nullbyte.</p>
<p>The risk come from the removal of characters following the NULL byte.
This removal can occurs with many system API (ie. usage of the File object).</p>
<p>
<b>Reference</b><br/>
<a href="http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection">WASC-28: Null Byte Injection</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Weak TrustManager implementation</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Empty TrustManager are generally implemented to connected to host that are not signed by root authorities.</p>
<p>A TrustManager allowing the specific certificate should be build. Details information for a proper implementation :
<a href="http://stackoverflow.com/a/6378872/89769">[1]</a> <a href="http://stackoverflow.com/a/5493452/89769">[2]</a></p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">JAX-WS (JSR224) endpoint</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>This method is part of a SOAP Web Service.</p>
<p>
<b>Analysis needed</b>
<ul>
<li>The input should be track for potential vulnerability.</li>
<li>The authentification (if inforce) should be tested using a web client.</li>
<li>The communication should ideally be over SSL.</li>
</ul>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">JAX-RS (JSR311) endpoint</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>This method is part of a REST Web Service.</p>
<p>
<b>Analysis needed</b>
<ul>
<li>The input should be track for potential vulnerability.</li>
<li>The authentification (if inforce) should be tested using a web client.</li>
<li>The communication should ideally be over SSL.</li>
<li>If the method allow include GET/POST, CSRF vulnerability should investigate.<sup>[1]</sup></li>
</ul>
</p>
<p>
1. <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)">OWASP - Cross-Site Request Forgery</a></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Tapestry Page</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Tapestry endpoint are discover at the application startup and are requires to be in <i>[base.package.name].pages</i>.
When a request is received, the GET/POST parameters are mapped to field. The mapping is either done with fieldName:</p>
<pre><code>
    [...]
    protected String input;
    [...]
</code></pre>
<p>or
the definition of an explicit annotation:
</p>
<pre><code>
    [...]
    @org.apache.tapestry5.annotations.Parameter
    protected String parameter1;

    @org.apache.tapestry5.annotations.Component(id = "password")
    private PasswordField passwordField;
    [...]
</code></pre>
<p>The current page is mapped to the view [/package/PageName].tml.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Wicket WebPage</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>This class represent a Wicket WebPage.</p>
<p>The input are read from a PageParameters instance passed to the constructor.</p>
<p>The current page is mapped to the view [/package/WebPageName].html.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Weak MessageDigest</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The algorithm used is not a recommended MessageDigest.</p>
<p>The <a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html">NIST</a> recommended to use either SHA-1, SHA-224*, SHA-256, SHA-384 or SHA-512.</p>
<p><small>* SHA-224 algorithm is not provided by <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SUNProvider"> SUN provider.</a></small></p>
<p>
<b>Reference</b><br/>
<a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html">NIST Approved Algorithms</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Custom MessageDigest</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Implementing custom MessageDigest is error-prone.</p>
<p>The <a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html">NIST</a> recommended to use either SHA-1, SHA-224*, SHA-256, SHA-384 or SHA-512.</p>
<p><small>* SHA-224 algorithm is not provided by <a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SUNProvider"> SUN provider.</a></small></p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Tainted filename read</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>The filename given by FileUpload api can be tampered by the client.</p>
<p>It can take value such as:</p>
<ul>
<li><code>"../../../config/overide_file"</code></li>
<li><code>"shell.jsp\u0000expected.gif"</code></li>
</ul>
<p>Therefore it should not be passed directly to filesystem api. If acceptable, a new filename should be picked.
Otherwise, the original filename should be properly escaped.</p>
<p>
<b>Reference</b><br/>
<a href="http://blogs.securiteam.com/index.php/archives/1268">Securiteam: File upload security recommendations</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">ReDOS</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>
<b>Reference</b><br/>
<a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">OWASP : Regular expression Denial of Service</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">XML parsing vulnerable to XXE attacks</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>Xml External Entity attacks can occurs when the XML parsers support XML entities and received
user input as XML content.</p>
<b>Risk 1: Expose local file content</b>
<p>...</p>
<b>Risk 2: Denial of service</b>
<p>...</p>
<a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260">CERT: IDS10-J. Prevent XML external entity attacks</a></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">XPath Injection</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>
<b>Reference</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-39: XPath Injection</a>
</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Struts 1 Action</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>This class is a Struts Action.</p>
<p>Once a request is route to this controller, a Form object will be builded that constains
the HTTP parameters.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Struts 2 endpoint</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>In struts 2, the endpoint are Plain Old Java Object (POJO) which means no Interface/Class are implements/extends.</p>
<p>When a request is route to its controller (like the selected class). The different HTTP parameters are mapped to setter of
the class. Therefor all setter of this class should be consider as input even if the form expected to be used doesn't include
all of them.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">Spring endpoint</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>This class is a Spring Controller. All method annotated with <code>RequestMapping</code> are reachable remotely.</p></td>
                    </tr>
                    
                    <tr>
                        <th class="bug_title">SQL Injection</th>
                    </tr>
                    <tr>
                        <td class="bug_desc"><p>
<b>Reference</b><br/>
<a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection">WASC-19: SQL Injection</a>
</p></td>
                    </tr>
                    </table>

            </p>
            <a name="integration"><span class="title">/integration</span></a>

            <p>
                This plugin can be integrate with various development tool.
                It can be use within <a href="http://findbugs.cs.umd.edu/eclipse/">Eclipse</a>,
                <a href="http://code.google.com/p/findbugs/wiki/IntellijFindBugsPlugins">IntelliJ</a> and
                <a href="http://kenai.com/projects/sqe/pages/Home">Netbeans</a> with their respective FindBugs plugin.
            </p>
            <p>
                It can also be use in continuous integration such as <a href="https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin">Jenkins</a>
                and <a href="http://www.sonarsource.org/">Sonar</a>.
            </p>
            <a name="license"><span class="title">/license</span></a>

            <p>
                This software is release under <a href="http://www.gnu.org/licenses/lgpl.html">LGPL</a>.<br/>
                <br/><a href="http://www.gnu.org/licenses/lgpl.html"><img src="lgplv3.png" alt="LGPL"/></a>
                <br/>
                <br/>
                Summary of the implications :
            <ul>
                <li>You can <b>use the plugin</b> to audit any kind of project (open source and proprietary).</li>
                <li>If you <b>modify the plugin</b>, you are requires to publish the modification.
                    If you need custom detectors for your proprietary framework, it is suggest to create a separate
                    plugin to avoid dependency to this plugin's code.
                </li>
            </ul>

            </p>


        </div>
    </div>
    <div stlye="clear:both"></div>
</div>
</body>
</html>